/******************************************************************************
Author: Zeel Patel
Lab: Tuesday 10AM to 10:50AM
Date: Tues, Sept 19
VSCode
This project is the 24 game where numbers are meant to equal 24 using a specific set of arithmatic operations that go from left to right. Not only is there 3185 possible solutions generated by the program but the player has to try to find one of the solutions and if their solution is correct then they win the game otherwise the correct solution is shown. 

*******************************************************************************/
#include <iostream>
#include <string>

using namespace std;

//Function checks the final arithmatic between ((x (+,-,*,/) y )(+,-,*,/) z) and s. Using this information, function uses the random number for which puzzle to display is checked against the updating value of count to find and display the random equation and its components. Function returns the value of count so that the value can contanstly incriment for every possibility
int checkSecondBlockVariablesWithS(float numPos,float x, float y, float z, float s,char firstSign, char secondSign, int count,int min, int max, int randomNumber, float& secRefNumX, float& secRefNumY,float& secRefNumZ,float& secRefNumS,string& puzzleChosen){

    //If the block3 arithmatic ie arithmatic between ((x (+,-,*,/) y )(+,-,*,/) z) and s is addition 
    if(numPos + s == 24){

        count++;//increase count so it can be used for random number and case testing comparision 

        if(count == randomNumber){//check if the random number and count are equal to find the randomly generated equation from the 3185 solutions 

            cout << "Puzzle chosen is #" << count << ":" << x << firstSign << y << secondSign << z << "+" << s << endl;//display once found 

            puzzleChosen = to_string(static_cast<int>(x)) + firstSign + to_string(static_cast<int>(y)) + secondSign + to_string(static_cast<int>(z)) + "+" + to_string(static_cast<int>(s));//updates variable puzzleChosen to a string so that it can be displayed to the user if the player does not get the right answer while playing the game

            //update the x,y,z and s refrence variables to be updated to the x,y,z and s of the random puzzle 
            secRefNumX = x;
            secRefNumY = y;
            secRefNumZ = z;
            secRefNumS = s;

        }else if((count >= min && count <= max)){//if the random number is not equal to count but count is in the randge of min and max

            cout << count << ":" << x << firstSign << y << secondSign << z << "+" << s << "=" << 24 << endl;//display range 

  
        }
    }

    //If the block3 arithmatic ie arithmatic between ((x (+,-,*,/) y )(+,-,*,/) z) and s is subtraction                 
    if((numPos - s) == 24){

        count++;//increase count so it can be used for random number and case testing comparision 
            
        if(count == randomNumber){//check if the random number and count are equal to find the randomly generated equation from the 3185 solutions 

            cout << "Puzzle chosen is #" << count << ":" << x << firstSign << y << secondSign << z << "-" << s << endl;//display once found 
            puzzleChosen = to_string(static_cast<int>(x)) + firstSign + to_string(static_cast<int>(y)) + secondSign + to_string(static_cast<int>(z)) + "-" + to_string(static_cast<int>(s));//updates variable
            //puzzleChosen to a string so that it can be displayed to the user if the player does not get the right answer while playing the game
            
            //update the x,y,z and s refrence variables to be updated to the x,y,z and s of the random puzzle 
            secRefNumX = x;
            secRefNumY = y;
            secRefNumZ = z;
            secRefNumS = s;


        }else if(count >= min && count <= max){//if the random number is not equal to count but count is in the randge of min and max
            cout << count << ":" << x << firstSign << y << secondSign << z << "-" << s << "=" << 24 << endl;//display range 
        }
    }

    //If the block3 arithmatic ie arithmatic between ((x (+,-,*,/) y )(+,-,*,/) z) and s is multiplication                   
    if((numPos * s) == 24){
            
        // int num = numPos * s;
        count++;//increase count so it can be used for random number and case testing comparision 

        if(count == randomNumber){

            cout << "Puzzle chosen is #" << count << ":" << x << firstSign << y << secondSign << z << "*" << s << endl;//display once found 

            puzzleChosen = to_string(static_cast<int>(x)) + firstSign + to_string(static_cast<int>(y)) + secondSign + to_string(static_cast<int>(z)) + "*" + to_string(static_cast<int>(s));//updates variable puzzleChosen to a string so that it can be displayed to the user if the player does not get the right answer while playing the game
            
            //update the x,y,z and s refrence variables to be updated to the x,y,z and s of the random puzzle 
            secRefNumX = x;
            secRefNumY = y;
            secRefNumZ = z;
            secRefNumS = s;

        }else if(count >= min && count <= max){//if the random number is not equal to count but count is in the randge of min and max
            cout << count << ":" << x << firstSign << y << secondSign << z << "*" << s << "=" << 24 << endl;//display range 
        }

    }
        
    //If the block3 arithmatic ie arithmatic between ((x (+,-,*,/) y )(+,-,*,/) z) and s is division                 
    if((numPos / s) == 24){

        // int num = numPos / s;

        count++;//increase count so it can be used for random number and case testing comparision 

        if(count == randomNumber){
            cout << "Puzzle chosen is #" << count << ":" << x << firstSign << y << secondSign << z << "/" << s << endl;//display once found 

            puzzleChosen = to_string(static_cast<int>(x)) + firstSign + to_string(static_cast<int>(y)) + secondSign + to_string(static_cast<int>(z)) + "/" + to_string(static_cast<int>(s));//updates variable puzzleChosen to a string so that it can be displayed to the user if the player does not get the right answer while playing the game
           
            //update the x,y,z and s refrence variables to be updated to the x,y,z and s of the random puzzle 
            secRefNumX = x;
            secRefNumY = y;
            secRefNumZ = z;
            secRefNumS = s;

            }else if(count >= min && count <= max){//if the random number is not equal to count but count is in the randge of min and max
                cout << count << ":" << x << firstSign << y << secondSign << z << "/" << s << "=" << 24 << endl;//display range 
   
            }                                

    }

    return count;
}

//Function used to check the arithmatic determine x (+,-,*,/) y with (+,-,*,/) z. Function not only continues to pass on the values used to store the random equation generated and its x,y,z,s coordinents but it also updates the value of count by calling another function and passing in this functions parameters. This function also returns the value of count so that it can be kept track of anc constantly updated per valid equation generated from the function calls. 
int checkFirstBlockVariablesWithZ(float firstBlock, char firstSign, char secondSign,int count, float x, float y, float z, float s,int min, int max, int randomNumber, float& refNumX, float& refNumY,float& refNumZ,float& refNumS,string& puzzleChosen){

    float totalBlock2 = 0;//Since (x (+,-,*,/) y)(+,-,*,/) z is block 2, this variable determines the total value for (x (+,-,*,/) y)(+,-,*,/) z
    //used to pass into the final function to check for block 3 ((x (+,-,*,/) y)(+,-,*,/) z )(+,-,*,/) s

    //check the arithmatic between (x (+,-,*,/) y) and z for addition 
    totalBlock2 = (firstBlock)+z;

    secondSign = '+';//change sign to addition 

    count = checkSecondBlockVariablesWithS(totalBlock2,x,y,z,s,firstSign,secondSign,count, min, max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of ((x (+,-,*,/) y)(+,-,*,/) z) and s. Updates count with the number of solutions that equal 24 in with this condition 

    //check the arithmatic between (x (+,-,*,/) y) and z for subtraction 
    totalBlock2 = (firstBlock)-z;

    secondSign = '-';//change sign to subtraction

    count = checkSecondBlockVariablesWithS(totalBlock2,x,y,z,s,firstSign,secondSign,count,min, max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of ((x (+,-,*,/) y)(+,-,*,/) z) and s. Updates count with the number of solutions that equal 24 in with this condition 

    //check the arithmatic between (x (+,-,*,/) y) and z for multiplication 
    totalBlock2 = (firstBlock)*z;

    secondSign = '*';//change sign to multiplication 

    count = checkSecondBlockVariablesWithS(totalBlock2,x,y,z,s,firstSign,secondSign,count,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of ((x (+,-,*,/) y)(+,-,*,/) z) and s. Updates count with the number of solutions that equal 24 in with this condition 

    //check the arithmatic between (x (+,-,*,/) y) and z for division 
    totalBlock2 = (firstBlock)/z;

    secondSign = '/';//change sign to divison 

    count = checkSecondBlockVariablesWithS(totalBlock2,x,y,z,s,firstSign,secondSign,count,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of ((x (+,-,*,/) y)(+,-,*,/) z) and s. Updates count with the number of solutions that equal 24 in with this condition 

//Count is returned so the total value can be updated 
return count;

}

//Function used to generate the 3185 solutions. Passes in parameters which help both determine which equations should be displayed (min and max) and which random puzzle is chosen and its coresponding components. Function is the first in the series of 3 functions that are used to generate 3185 solutions. Function has parameters that are passed in from the main function, reference parameters are used to keep track of random equations x,y,z,s coordinets and puzzlechosen is to store the random puzzle as a string. User min and max values are passed in to the function calls in this function so that the approperate equations can be displayed. Function does not return any variable, only 0. 
int generateSolutions(int min, int max,float& refNumX, float& refNumY,float& refNumZ,float& refNumS, string& puzzleChosen){

    int count = 0;//Helps keep track of how many equations are being generated and which equations from the min value inputed by the user starts at to the max value inputed by the user ends at

    srand(time(0));//To make sure every time the game is run a different random equation is chosen 

    int randomNumber = (rand() % 3184) + 1;//Generates random number for which of the 3185 equations will be picked 

    char secondSign = ' ';//Keeps track of the second sign in the (x & y) & z section  

    char firstSign = ' ';//Keeps track of the first sign in the (x & y) section 

    float firstBlock = 0;// indicates the value of x (+,-,*,/) y

    //Loops go over each of the 4 variables (x,y,z,s) from 1 to 9 
    for(float x = 1; x < 10; x++){//x
        for(float y = 1; y < 10; y++){//y
            for(float z = 1; z < 10; z++){//z
                for(float s = 1; s < 10; s++){//s

                    //If the first block is addition then add x and y 
                    firstBlock = x + y;
                    firstSign = '+'; //change the first sign to plus
                    count = checkFirstBlockVariablesWithZ(firstBlock,firstSign,secondSign,count,x,y,z,s,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of (x (+,-,*,/) y) with z. Updates count with the number of solutions that equal 24 in with this condition 

                    //If the first block is subtraction then subtract x and y 
                    firstBlock = x - y;
                    firstSign = '-';//change the first sign to minus 
                    count = checkFirstBlockVariablesWithZ(firstBlock,firstSign,secondSign,count,x,y,z,s,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of (x (+,-,*,/) y) with z. Updates count with the number of solutions that equal 24 in with this condition 

                    //If the first block is multiplication then multiply x and y 
                    firstBlock = x * y;
                    firstSign = '*';//change the first sign to multiply x and y
                    count = checkFirstBlockVariablesWithZ(firstBlock,firstSign,secondSign,count,x,y,z,s,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of (x (+,-,*,/) y) with z. Updates count with the number of solutions that equal 24 in with this condition 

                    //If the first block is division then divide x and y
                    firstBlock = x / y;
                    firstSign = '/';//change the first sign to divide x and y 
                    count = checkFirstBlockVariablesWithZ(firstBlock,firstSign,secondSign,count,x,y,z,s,min,max,randomNumber,refNumX,refNumY,refNumZ,refNumS,puzzleChosen);//Calls function to check operations that can equal 24 with the value of (x (+,-,*,/) y) with z. Updates count with the number of solutions that equal 24 in with this condition 
                
                }
            }
        }
    }
    
    return 0;
}

//Function used to check if the valid string of operators are used in the correct way to have the numbers equal to 24. This is checked by passing in the x,y,z,s coordinents of the random puzzle and itterating through the user input to check the operations. Function also displays whether or not the user played the correct operations or not. 
int checkOperations(string inp, float x,float y,float z, float s,string randPuzzle){//Parameters are passed to both check the signs with the numbers and display the correct puzzle type if answer is wrong
    
    //Block varibales are used to store values for each section of the equation that will be computed ie. ( x & y ) & z) & s;
    float block1 = 0; //x & y
    float block2 = 0;// block1 & z
    float block3 = 0;//block2 & s
    int inpSize = inp.size();//Size of the input string 

    for(int i = 0; i < inpSize; i++){//goes over the input for the operations 

            //checks for addition for block 1
            if(i == 0 && inp.at(i) == '+'){
                block1 = x+y;
                cout << x << " + " << y << " = " << block1 << endl;
                
            //checks for subtraction for block 1
            }else if(i == 0 && inp.at(i) == '-'){
                block1 = x-y;
                cout << x << " - " << y << " = " << block1 << endl;

            //checks for multiplication for block 1
            }else if(i == 0 && inp.at(i) == '*'){
                block1 = x*y;
                cout << x << " * " << y << " = " << block1 << endl;

            //checks for division of block 1
            }else if(i == 0 && inp.at(i) == '/'){
                block1 = x/y;
                cout << x << " / " << y << " = " << block1 << endl;

            }

            //checks for addition for block 2
            if(i == 1 && inp.at(i) == '+'){
                block2 = block1 + z;
                cout << block1 << " + " << z << " = " << block2 << endl;

            //checks for subtraction for block 2
            }else if(i == 1 && inp.at(i) == '-'){
                block2 = block1 - z;
                cout << block1 << " - " << z << " = " << block2 << endl;

            //checks for multiplication for block 2
            }else if(i == 1 && inp.at(i) == '*'){
                block2 = block1 * z;
                cout << block1 << " * " << z << " = " << block2 << endl;

            //checks for division for block 2
            }else if(i == 1 && inp.at(i) == '/'){
                block2 = block1 / z;
                cout << block1 << " / " << z << " = " << block2 << endl;

            }

            //checks for addition for block 3
            if(i == 2 && inp.at(i) == '+'){
                block3 = block2 + s;
                cout << block2 << " + " << s << " = " << block3 << endl;

            //checks for subtraction for block 3
            }else if(i == 2 && inp.at(i) == '-'){
                block3 = block2 - s;
                cout << block2 << " - " << s << " = " << block3 << endl;

            //checks for multiplication for block 3
            }else if(i == 2 && inp.at(i) == '*'){
                block3 = block2 * s;
                cout << block2 << " * " << s << " = " << block3 << endl;

            //checks for division for block 3
            }else if(i == 2 && inp.at(i) == '/'){
                block3 = block2 / s;
                cout << block2 << " / " << s << " = " << block3 << endl;

            }

        }

        //checks to see if after doing the arithmatic for the inputed operations, if the resulting value is 24 or not 
        if(block3 == 24){

            cout << "Well Done!";

        }else{
            //if wrong the correct random puzzle that was initally chosen is displayed
            cout << "Incorect, answer is: " << randPuzzle << endl;

        }
    
    return 0;
}

//function checks to see if the operations inputed by the user are consisting of the correct four operations that can be used and sets reference boolean variable 'correct' to true if operations in the user input are consiting of either +,-,* or / and false otherwise. 
void checkCorrectOperationsUsed(string inp, bool& correct){//has a reference variable correct which is false if any 1 of the 3 operations are not valid
    int inpSize = inp.size();//size of input string 

    for(int i = 0; i < inpSize; i++){//Checks the input string

        if(inp.at(i) == '+'){//Check addition sign
            correct = true;
            
        }else if(inp.at(i) == '-'){//Check subtraction sign
            correct = true;
            
        }else if(inp.at(i) == '*'){//Check multiplication sign
            correct = true;
            
        }else if(inp.at(i) == '/'){//Check division sign
            correct = true;
            
        }else{
            correct = false;//If none of the signs match even once then the loop stops and correct is set as false 
            break;
        }
    }

}

//Function is first called when code is ran
int main()
{
    
    int min = 0; // min input that the user inputs
    int max = 0; // max input that the user inputs 

    float randNumX = 0; //values used to display value x of random puzzle chosen
    float randNumY = 0; //values used to display value y of random puzzle chosen
    float randNumZ = 0; //values used to display value z of random puzzle chosen
    float randNumS = 0; //values used to display value s of random puzzle chosen

    bool passedCorrect = false; // used to check if the operations input are valid, if so, then to check for correctness

    bool check = true; //used to check if there are valid characters inputed by the user

    string puzzleChosen = " "; // random puzzle that is chosen by the user 

    string operationInput; //store the input of the operations that the user will use 

    //Beginning intro as shown on instruction examples
    cout << "Author: Zeel Patel" << endl;
    cout << "Program 2: Twenty Four" << endl;
    cout << "TA: Tues 10-11" << endl;
    cout << "Sep 10, 2023" << endl;
    cout << "Welcome to the game of Twenty Four.\nCombine the four numbers shown below, \nin the order shown below, using the operators \n(+, -, *, / ) to yield the value 24." << endl;
    cout << "**** Begin Debug Display ****" << endl;
    
    //Prompts for the actual game start 
    cout << "Enter the beginning solution to be printed: ";
    cin >> min; //min value is collected 
    cout << endl;

    cout << "Enter the end solution to be printed: ";
    cin >> max; // max value is collected 
    cout << endl;

    //solutions are generated based on inputs from the user and a random puzzle is returned along with x,y,z and s numbers of that random puzzle 
    generateSolutions(min, max,randNumX,randNumY,randNumZ,randNumS,puzzleChosen);

    cout << "**** End Debug Display ****" << endl;

    cout << "The numbers to use are " << randNumX << " " << randNumY << " " << randNumZ << " " << randNumS << endl; //Displays the random numbers that are produced from the randomly generated equation 

    cout << "Enter the three operators to be used (+, -, * or / ): ";

    cin >> operationInput;//Collects input for the operaion to be used 

    checkCorrectOperationsUsed(operationInput,check);//checks if the operation entered is valid operator to be used in the game. 
    
    while(!passedCorrect){//Only becomes false when the input of the operations used is valid meaning has the correct number of characters and valid characters entered

        checkCorrectOperationsUsed(operationInput,check);//Continuously checks if the operations inputed are valid or not until user inputs the right type and number of operators. 

        if (operationInput.size() != 3){//checks size of the input to make sure it is consistant of 3 numbers 

            cout << "invalid number of characters entered, please try again" << endl;

        }else if(check == 0){//checks if the return by referance value for check from function checkCorrectnessOfInput is true or false

            cout << "invalid characters entered, please try again" << endl;

        }else{

            passedCorrect = true;//If true then loop stops and puzzle is checked for matching the randomly chosen puzzle

            break;

        }

        cin >> operationInput;//collects user input again until a satisfied answer is not inputed 

        
    }

    if(passedCorrect){//if input for the operation is valid then the operations inputed will be checked to see if the user wins or not 

        checkOperations(operationInput,randNumX,randNumY,randNumZ,randNumS,puzzleChosen);//Function used to determine if the user got the arithmatic correct or not 

    }



    return 0;
}

